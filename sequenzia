#!/bin/sh

echo "Sequenzia Server Control (Alpha)"

if [ -n "$1" ]
then
	case "$1" in
		start)
			if [ -n "$2" ]
			then
				case "$2" in
					core) docker compose up database mq framework authware -d;;
					test-core) docker compose up database mq framework authware;;
					core-external)
						echo "Starting with Backend SQL and MQ ports exposed!";
						docker compose -f docker-compose.yaml -f docker-compose-external.yaml up database mq framework authware -d;;
					external)
						echo "Starting with Backend SQL and MQ ports exposed!";
						docker compose -f docker-compose.yaml -f docker-compose-external.yaml up -d;;
					uploader) docker compose up framework fileworker -d;;
					samba) docker compose -f docker-compose.yaml -f docker-compose-share.yaml up kanmi-fileworker-share -d;;
					noproxy) docker compose up -d;;
					test) docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml up;;
					*) docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml up $2 -d;;
				esac
			else
				docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml up -d
			fi
			;;
		stop)
			if [ -n "$2" ]
			then
				case "$2" in
					core) docker compose stop framework authware -d;;
					core-external)
						docker compose -f docker-compose.yaml -f docker-compose-external.yaml stop database mq authware framework;;
					external);;
			    uploader) docker compose stop framework fileworker -d;;
					samba) docker compose -f docker-compose.yaml -f docker-compose-share.yaml stop kanmi-fileworker-share -d;;
					*) docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml stop $2 -d;;
				esac
			else
				docker exec -it "$(docker compose ps database | tail -n +2 | awk '{ print $1 }')" sh /backup.sh;
			fi
			docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down;
			;;
		restart)
			if [ -n "$2" ]
			then
				case "$2" in
					core) docker compose restart framework authware -d;;
					core-external)
						echo "Restarting with Backend SQL and MQ ports exposed!";
						docker compose -f docker-compose.yaml -f docker-compose-external.yaml restart database mq authware framework;;
					external)
						echo "Starting with Backend SQL and MQ ports exposed!";
						docker compose -f docker-compose.yaml -f docker-compose-external.yaml restart -d;;
				  uploader) docker compose restart framework fileworker -d;;
					samba) docker compose -f docker-compose.yaml -f docker-compose-share.yaml restart kanmi-fileworker-share -d;;
					noproxy) docker compose restart -d;;
					*) docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml restart $2 -d;;
				esac
			else
				docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml restart
			fi
			;;
		reset)
			if [ -n "$2" ]
			then
				docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down;
				case "$2" in
					core) docker compose up database mq framework authware -d;;
					core-external)
						echo "Starting with Backend SQL and MQ ports exposed!";
						docker compose -f docker-compose.yaml -f docker-compose-external.yaml up database mq framework authware -d;;
					external)
						echo "Starting with Backend SQL and MQ ports exposed!";
						docker compose -f docker-compose.yaml -f docker-compose-external.yaml up -d;;
					samba) docker compose -f docker-compose.yaml -f docker-compose-share.yaml up kanmi-fileworker-share -d;;
					uploader) docker compose up framework fileworker -d;;
					noproxy) docker compose up -d;;
					*) docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml up $2 -d;;
				esac
			else
			  docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down;
				docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml up -d
			fi
			;;
		config) nano common/config/user-config.json ;;
		env) nano common/config/user-config.env ;;
		setupaw) nano common/config/setup-authware.env ;;
		status) docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml ps;;
		logs) docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml logs -f;;
		certgen)
			docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml up frontend -d &&
			docker exec -it "$(docker compose ps frontend | tail -n +2 | awk '{ print $1 }')" openssl req -new -x509 -nodes -days 365 -sha256 -subj "/C=JP/ST=Tokyo/L=Academy City/O=Academy City Research - Non-Affiliated Subsidiary/CN=example.tokyo" -addext "subjectAltName=DNS:example.tokyo" -newkey rsa:2048 -keyout /certs/frontend.key -out /certs/frontend.crt &&
			docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml  stop frontend &&
			docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml  up frontend -d &&
			echo "IMPORTANT! MAC OS handles self signed certificates poorly and you will have to get a real certificate from certbot once your ready to complete";;
		update)
			git pull &&
			docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down &&
			docker compose build --no-cache &&
			docker system prune -f &&
			echo "################################################################" &&
			echo "Update Completed Successfully" &&
			echo "################################################################" &&
			echo "" &&
			echo "Please use your appropriate start command or just use 'start'"
			;;
		build)
			if [ -n "$2" ]
			then
				docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml stop $2 &&
				docker compose build --no-cache $2 &&
				docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml up $2 -d &&
				docker system prune -f &&
				echo "################################################################" &&
				echo "Build of $2 Completed Successfully and Restarted" &&
				echo "################################################################"
			else
				docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down &&
				docker system prune -f &&
				docker compose build --no-cache &&
				echo "################################################################" &&
				echo "Build Completed Successfully" &&
				echo "################################################################" &&
				echo "" &&
				echo "Please use your appropriate start command or just use 'start'"
			fi
			;;
		refresh)
		  echo "Updating to latest commit..."
		  UPDATE_COMMAND='git fetch && git reset --hard origin && npm install'
		  docker exec -it "$(docker compose ps watchdog | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/watchdog/ && " &&
      docker compose restart watchdog &&
      sleep 5 &&
		  docker exec -it "$(docker compose ps watchdog | tail -n +2 | awk '{ print $1 }')" sh -c '/wait && mysql -h "$DATABASE_HOST" -u "$DATABASE_USERNAME" -p"$DATABASE_PASSWORD" kanmi_system < /across/compliance_v20.sql' &&
      docker exec -it "$(docker compose ps authware | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/sequenzia-framework/ && ${UPDATE_COMMAND}"  &&
      docker compose restart authware &&
      docker exec -it "$(docker compose ps framework | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/sequenzia-framework/ && ${UPDATE_COMMAND}"  &&
      docker compose restart framework &&
      docker exec -it "$(docker compose ps fileworker | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/sequenzia-framework/ && ${UPDATE_COMMAND}"  &&
      docker compose restart fileworker &&
      docker exec -it "$(docker compose ps web | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/sequenzia-web/ && ${UPDATE_COMMAND}"  &&
      docker compose restart web &&
      echo "################################################################" &&
      echo "Refresh Completed - This is NOT persistent and you will need to" &&
      echo "build to persistently update the images" &&
      echo "################################################################" &&
      echo "";;
		prerelease)
		  echo "Updating to latest prerelease commit..."
		  if [ "$(git rev-parse --abbrev-ref HEAD)" = "prerelease" ]; then
		    UPDATE_COMMAND='git fetch; [[ "$(git show-ref refs/heads/prerelease | wc -l)" -gt 0 ]] ? git reset --hard "origin/prerelease" && npm install : echo "No Update Available" && exit 1;'
        docker exec -it "$(docker compose ps watchdog | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/watchdog/ && ${UPDATE_COMMAND}" &&
        docker compose restart watchdog &&
        sleep 5;
        docker exec -it "$(docker compose ps watchdog | tail -n +2 | awk '{ print $1 }')" sh -c '/wait && mysql -h "$DATABASE_HOST" -u "$DATABASE_USERNAME" -p"$DATABASE_PASSWORD" kanmi_system < /across/compliance_v20.sql' &&
        docker exec -it "$(docker compose ps authware | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/sequenzia-framework/ && ${UPDATE_COMMAND}" &&
        docker compose restart authware;
        docker exec -it "$(docker compose ps framework | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/sequenzia-framework/ && ${UPDATE_COMMAND}" &&
        docker compose restart framework;
        docker exec -it "$(docker compose ps fileworker | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/sequenzia-framework/ && ${UPDATE_COMMAND}" &&
        docker compose restart fileworker;
        docker exec -it "$(docker compose ps web | tail -n +2 | awk '{ print $1 }')" sh -c "cd /across/sequenzia-web/ && ${UPDATE_COMMAND}" &&
        docker compose restart web;
        echo "################################################################" &&
        echo "Prerelease Refresh Completed - So things may be broken..." &&
        echo "This is NOT persistent and you will need to update environment" &&
        echo "file to use prerelease and build to persistently update the images" &&
        echo "################################################################" &&
        echo ""
      else
        echo "Please run 'git checkout prerelease' to update the compose scripts. This is to ensure that the latest compliance file is used (if needed)."
      fi;;
		fbuild)
			git pull &&
			docker build --no-cache -t kihara/across-base:latest ./base &&
			docker tag kihara/across-base:latest kihara/across-base:v20 &&
			docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down &&
			docker compose build --no-cache &&
			docker system prune -f &&
			echo "################################################################" &&
			echo "Build Completed Successfully" &&
			echo "################################################################" &&
			echo "" &&
			echo "Please use your appropriate start command or just use 'start'"
			;;
		publish) docker push kihara/across-base:latest && docker push kihara/across-base:v20;;
		backup)
		  docker compose up database -d &&
		  docker exec -it "$(docker compose ps database | tail -n +2 | awk '{ print $1 }')" sh /backup.sh
		  echo "DANGER!!! BACKUP FILES CONTAIN UNENCRYPTED USER DATA AND ARE CONSIDERED PROTECTED CONFIDENTIAL DATA"
      echo "YOU ARE RESPONSIBLE FOR THE SECURITY OF THESE FILES, ACADEMY CITY RESEARCH AND DIGITAL ARTIFACTS LLC"
      echo "IS NOT RESPONSIBLE FOR ANY DAMAGES CAUSED BY IMPROPER HANDLING OF BACKUP FILES";;
		restore)
		  cp "$(ls -Art ./common/data/backup/database-* | tail -n 1)" ./common/data/backup/restore.sqldump.bz2;
		  docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down &&
		  docker compose up database -d &&
		  docker exec -it "$(docker compose ps database | tail -n +2 | awk '{ print $1 }')" sh /restore.sh &&
		  echo "You can now start Sequenzia normally!";;
		export)
		  docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down &&
      docker compose up database -d &&
      docker exec -it "$(docker compose ps database | tail -n +2 | awk '{ print $1 }')" sh /backup.sh kickstart.sql &&
      tar --exclude=./common/config/compliance* \
      --exclude=./common/config/example.*  \
      --exclude=./common/data/upload \
      --exclude=./common/data/.temp \
      --exclude=./common/data/.web-upload \
      --exclude=./common/data/backup/database-* \
      -cvjf "./sequenzia-kickstart-$(date +%Y-%m-%d_%H-%M).tar.bz2" \
      ./common/data/ \
      ./common/config/ \
      ./common/well-known/ \
      ./common/persistent/ \
      ./common/ssl/ &&
      rm ./common/data/backup/kickstart.sql &&
      docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down &&
      echo "Export Completed, Please take the kickstart file to your new server or store this for later!"
      echo ""
      echo "DANGER!!! KICKSTART FILES CONTAIN UNENCRYPTED USER DATA AND ARE CONSIDERED PROTECTED CONFIDENTIAL DATA"
      echo "YOU ARE RESPONSIBLE FOR THE SECURITY OF THESE FILES, ACADEMY CITY RESEARCH AND DIGITAL ARTIFACTS LLC"
      echo "IS NOT RESPONSIBLE FOR ANY DAMAGES CAUSED BY IMPROPER HANDLING OF KICKSTART FILES";;
		import)
      if [ "$(ls -Art ./sequenzia-kickstart* | wc -l)" -gt 0 ]; then
  		  tar xvf "$(ls -Art ./sequenzia-kickstart* | tail -n 1)" &&
	  	  docker compose -f docker-compose.yaml -f docker-compose-frontend.yaml -f docker-compose-external.yaml -f docker-compose-manager.yaml -f docker-compose-share.yaml down &&
		    docker compose build --no-cache &&
		    docker compose up database -d &&
  		  docker exec -it "$(docker compose ps database | tail -n +2 | awk '{ print $1 }')" sh /restore.sh kickstart.sql
	  	  rm ./common/data/backup/kickstart.sql &&
		    echo "Import Completed, Ready to start Sequenzia!"
		  else
        echo "No kickstart file found!"
      fi;;
		upload)
		  docker compose up database -d &&
		  docker exec -it "$(docker compose ps database | tail -n +2 | awk '{ print $1 }')" sh /backup.sh && cp common/data/backup/database-* common/data/upload/Backup
		  echo "The backup file should now be uploading to Sequenzia's Backup folder."
		  echo "If you removed that folder then your in big fucking trouble, because it will upload to the data channel..."
		  echo "DANGER!!! BACKUP FILES CONTAIN UNENCRYPTED USER DATA AND ARE CONSIDERED PROTECTED CONFIDENTIAL DATA"
      echo "YOU ARE RESPONSIBLE FOR THE SECURITY OF THESE FILES, ACADEMY CITY RESEARCH AND DIGITAL ARTIFACTS LLC"
      echo "IS NOT RESPONSIBLE FOR ANY DAMAGES CAUSED BY IMPROPER HANDLING OF BACKUP FILES";;
		*) echo "$1 is not an valid command" ;;
	esac
else
	echo ""
	echo "start      - Start service(s)"
	echo "restart    - Restart service(s)"
	echo "reset      - Reset (down/up) service(s)"
	echo "stop       - Shutdown service(s)"
	echo "status     - Status of operations"
	echo "logs       - View live service logs"
	echo ""
	echo "config     - Edit User Configuration File"
	echo "env        - Edit User Environment File"
	echo "setupaw    - Edit AuthWare Configuration File"
	echo ""
	echo "update     - Update to latest version"
	echo "refresh    - Update to latest commit (Non-Persistent)"
	echo "prerelease - Update to latest prerelease commit (Non-Persistent)"
	echo "build      - Rebuild Element(s) and Reload Static Files"
	echo "fbuild     - Rebuild ACROSS, Update base files, and Build Elements"
	echo "publish    - Publish ACROSS Images (Contributors Only)"
	echo "certgen    - Generate New Default SSL Certificates"
	echo ""
	echo "upload     - Backup Database to Discord #backup Channel"
	echo "backup     - Backup Database to /common/data/backup"
	echo "restore    - Restore last Database from /common/data/backup"
	echo ""
	echo "export     - Export Kickstart Tarball"
	echo "import     - Import Kickstart Tarball"
fi
